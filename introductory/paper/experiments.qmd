# Experiments

## Random access

Based on experiments in [@zeng2023empirical].

## Scanning


### Overall scan performance

To provide an overall idea of performance while scanning, we compare Lance to Parquet [^parquet-scan-note] for two datasets. One is the first 1.8 million rows of the Laion-5B dataset, including a vector embedding column. The other is the `lineitem` table from the TPC-H dataset (with scale factor 10). The Laion dataset represents a typical computer vision dataset, while the TPC-H lineitem table represents a typical OLAP dataset.

[^parquet-scan-note]: The Parquet implementation we used to scan is PyArrow `15.0.0dev338`. The `lineitem` files were written with DuckDB 0.9.0, using default settings (SNAPPY compression). The Laion dataset was written with PyArrow. The vector column in this dataset was float16 type with 768 dimensions.

The first relevant factor in the scan performance is on-disk size, since this determines how much IO must be performed to scan the full table. The sizes are shown in @fig-dataset-size. In both cases, Lance is larger than Parquet. This is because Lance does not currently implement any encodings or compression which might reduce the on-disk size. This size difference is especially pronounced for the TCP-H dataset, which largely has data types that are highly compressible. The Laion dataset does not benefit nearly as much from compression because much of the dataset size comes from the vector embedding column, which has been found in @zeng2023empirical to be difficult to compress. In fact, if you write just the vector column out to files in Lance and Parquet, they will be roughly the same size.

```{r, warning=FALSE, message=FALSE}
library(gt)
library(ggplot2)
library(tidyr)
library(dplyr)

# data <- read.csv("introductory/experiments/overall_scans/results.csv")
data <- read.csv("../experiments/overall_scans/results.csv")

data$format <- tools::toTitleCase(data$format)
data$dataset <- ifelse(data$dataset == "laion", "Laion", "TPC-H lineitem")
data$rows_per_sec <- data$dataset_num_rows / data$scan_time
```


```{r}
#| label: fig-dataset-size
#| fig-cap: Size of datasets used in scan benchmarks
data |>
    filter(row_group_size == 102400) |>
    mutate(
        size = dataset_size_bytes / 1024 / 1024 / 1024,
        row_size = dataset_size_bytes / 1024 / dataset_num_rows,
        rows = dataset_num_rows / 1000 / 1000,
    ) |>
    select(dataset, format, size, row_size) |>
    pivot_wider(names_from = format, values_from = c("row_size", "size")) |>
    mutate(Ratio = size_Lance / size_Parquet) |>
    gt(rowname_col = "dataset") |>
    tab_spanner(
        label="On-disk size (GB)",
        columns=c("size_Lance", "size_Parquet")
    ) |>
    tab_spanner(
        label="KB / row",
        columns=c("row_size_Lance", "row_size_Parquet")
    ) |>
    fmt_number(
        columns = c("size_Lance", "size_Parquet", "Ratio"),
        decimals = 1
    ) |>
    fmt_number(
        columns = c("row_size_Lance", "row_size_Parquet"),
        decimals = 3
    ) |>
    cols_label(
        ends_with("Parquet") ~ "Parquet",
        ends_with("Lance") ~ "Lance"
    )
```

The relative performance of scans in Lance verus Parquet varies between the datasets. For the TPC-H dataset, Lance is roughly 45% slower than Parquet. This is likely simply due to the relative on-disk size. Meanwhile in the Laion dataset, scanning Lance is 5x faster than scanning Parquet, likely due to it's more efficient decoding of the vector column.

It's worth noting that Lance's default setting is for row group size of 1024. This setting reduces scan performance of analytic data significantly, in both Lance and Parquet. This default setting is used since many Lance datasets have some wide columns such as images, where buffering more than 1024 rows before flushing to disk would mean excessive memory overhead. However, given this performance hit for scalar columns, future work may be necesary to decouple the page size of wide and small columns to allow for better OLAP scan performance while still maintaining reasonable memory requirements when writing data.

```{r}
#| label: fig-full-scan-runtime
#| fig-cap: Performance of full dataset scan.
#| fig-height: 4
#| fig-width: 5
ggplot(data, aes(x = format, y = rows_per_sec)) +
    geom_col() +
    facet_grid(dataset ~ row_group_size, labeller = "label_both", scales = "free_y") +
    labs(
      x="Format",
      y="Rows scanned per second",
     )
```
